'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import AdminNavigation from '@/components/AdminNavigation';

interface Appointment {
  id: string;
  customerName: string;
  customerEmail: string;
  customerPhone: string;
  petName: string;
  petBreed: string;
  petSize: string;
  services: Array<{
    id: string;
    name: string;
    price: string;
    duration: number;
  }>;
  date: string;
  time: string;
  status: 'confirmed' | 'pending' | 'completed' | 'cancelled';
  totalPrice: string;
  notes: string;
  createdAt: string;
}

export default function AppointmentsPage() {
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const [filteredAppointments, setFilteredAppointments] = useState<Appointment[]>([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState<'all' | 'confirmed' | 'pending' | 'completed' | 'cancelled'>('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedAppointment, setSelectedAppointment] = useState<Appointment | null>(null);
  const router = useRouter();

  useEffect(() => {
    checkAuthentication();
    loadAppointments();
  }, []);

  useEffect(() => {
    filterAppointments();
  }, [appointments, filter, searchTerm]);

  const checkAuthentication = () => {
    const token = localStorage.getItem('adminToken');
    if (!token) {
      router.push('/admin/login');
    }
  };

  const loadAppointments = async () => {
    try {
      let url = '/api/admin/appointments';
      const params = new URLSearchParams();

      if (filter !== 'all') {
        params.append('status', filter);
      }
      if (searchTerm) {
        params.append('search', searchTerm);
      }

      if (params.toString()) {
        url += '?' + params.toString();
      }

      const response = await fetch(url);
      const result = await response.json();

      if (result.success) {
        setAppointments(result.data);
      } else {
        console.error('Failed to load appointments:', result.error);
        setAppointments([]);
      }
    } catch (error) {
      console.error('Error loading appointments:', error);
      setAppointments([]);
    } finally {
      setLoading(false);
    }
  };

  const filterAppointments = () => {
    let filtered = appointments;

    // Filter by status
    if (filter !== 'all') {
      filtered = filtered.filter(apt => apt.status === filter);
    }

    // Filter by search term
    if (searchTerm) {
      filtered = filtered.filter(apt =>
        apt.customerName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        apt.petName.toLowerCase().includes(searchTerm.toLowerCase()) ||
        apt.customerEmail.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    setFilteredAppointments(filtered);
  };

  const updateAppointmentStatus = async (appointmentId: string, newStatus: Appointment['status']) => {
    try {
      const response = await fetch('/api/admin/appointments', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          appointmentId,
          status: newStatus
        }),
      });

      const result = await response.json();

      if (result.success) {
        // Update local state
        setAppointments(prev =>
          prev.map(apt =>
            apt.id === appointmentId ? { ...apt, status: newStatus } : apt
          )
        );
        setSelectedAppointment(prev => prev ? { ...prev, status: newStatus } : null);
      } else {
        console.error('Failed to update appointment status:', result.error);
        alert('Failed to update appointment status. Please try again.');
      }
    } catch (error) {
      console.error('Error updating appointment status:', error);
      alert('Network error. Please try again.');
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'confirmed': return 'bg-green-100 text-green-800 border-green-200';
      case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'completed': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'cancelled': return 'bg-red-100 text-red-800 border-red-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      weekday: 'short',
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Admin Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-4">
              <div className="w-10 h-10 bg-purple-600 rounded-lg flex items-center justify-center">
                <span className="text-white font-bold text-lg">P</span>
              </div>
              <div>
                <h1 className="text-xl font-bold text-gray-900">Appointment Management</h1>
                <p className="text-sm text-gray-500">Manage all customer bookings</p>
              </div>
            </div>
            <button
              onClick={() => router.push('/admin/login')}
              className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
            >
              Logout
            </button>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <AdminNavigation activeTab="appointments" />
        {/* Filters and Search */}
      <div className="bg-white rounded-xl shadow-sm p-6 mb-8">
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="flex-1">
              <input
                type="text"
                placeholder="Search by customer name, pet name, or email..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              />
            </div>

            <div className="flex gap-2">
              {(['all', 'confirmed', 'pending', 'completed', 'cancelled'] as const).map((status) => (
                <button
                  key={status}
                  onClick={() => setFilter(status)}
                  className={`px-4 py-3 rounded-lg font-medium transition-colors ${
                    filter === status
                      ? 'bg-purple-600 text-white'
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                >
                  {status === 'all' ? 'All' : status.charAt(0).toUpperCase() + status.slice(1)}
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* Appointments List */}
        <div className="bg-white rounded-xl shadow-sm overflow-hidden">
          <div className="px-6 py-4 border-b border-gray-200">
            <h2 className="text-lg font-bold text-gray-900">
              Appointments ({filteredAppointments.length})
            </h2>
          </div>

          {loading ? (
            <div className="flex items-center justify-center py-12">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
            </div>
          ) : filteredAppointments.length === 0 ? (
            <div className="text-center py-12">
              <p className="text-gray-500">No appointments found matching your criteria.</p>
            </div>
          ) : (
            <div className="divide-y divide-gray-200">
              {filteredAppointments.map((appointment) => (
                <div
                  key={appointment.id}
                  className="p-6 hover:bg-gray-50 transition-colors cursor-pointer"
                  onClick={() => setSelectedAppointment(appointment)}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <div className="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center">
                        <span className="text-purple-600 font-semibold">
                          {appointment.customerName.split(' ').map(n => n[0]).join('')}
                        </span>
                      </div>

                      <div>
                        <h3 className="font-semibold text-gray-900">{appointment.customerName}</h3>
                        <p className="text-sm text-gray-600">{appointment.petName} ({appointment.petBreed})</p>
                        <p className="text-sm text-gray-500">{appointment.customerEmail}</p>
                      </div>
                    </div>

                    <div className="text-right">
                      <p className="font-semibold text-gray-900">{formatDate(appointment.date)}</p>
                      <p className="text-sm text-gray-600">{appointment.time}</p>
                      <p className="text-sm font-medium text-purple-600">{appointment.totalPrice}</p>
                    </div>

                    <div className="flex items-center space-x-3">
                      <span className={`px-3 py-1 rounded-full text-xs font-medium border ${getStatusColor(appointment.status)}`}>
                        {appointment.status}
                      </span>

                      <div className="flex space-x-1">
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            window.open(`tel:${appointment.customerPhone}`);
                          }}
                          className="p-2 text-gray-400 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                          title="Call customer"
                        >
                          📞
                        </button>

                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            window.open(`mailto:${appointment.customerEmail}`);
                          }}
                          className="p-2 text-gray-400 hover:text-green-600 hover:bg-green-50 rounded-lg transition-colors"
                          title="Email customer"
                        >
                          ✉️
                        </button>
                      </div>
                    </div>
                  </div>

                  <div className="mt-4 flex items-center justify-between text-sm text-gray-600">
                    <span>Services: {appointment.services.map(s => s.name).join(', ')}</span>
                    <span>Booking ID: {appointment.id}</span>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Appointment Detail Modal */}
      {selectedAppointment && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-bold text-gray-900">Appointment Details</h2>
                <button
                  onClick={() => setSelectedAppointment(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <span className="text-2xl">×</span>
                </button>
              </div>
            </div>

            <div className="p-6 space-y-6">
              {/* Customer Information */}
              <div>
                <h3 className="font-semibold text-gray-900 mb-3">👤 Customer Information</h3>
                <div className="bg-gray-50 p-4 rounded-lg space-y-2">
                  <p><strong>Name:</strong> {selectedAppointment.customerName}</p>
                  <p><strong>Email:</strong> {selectedAppointment.customerEmail}</p>
                  <p><strong>Phone:</strong> {selectedAppointment.customerPhone}</p>
                </div>
              </div>

              {/* Pet Information */}
              <div>
                <h3 className="font-semibold text-gray-900 mb-3">🐕 Pet Information</h3>
                <div className="bg-gray-50 p-4 rounded-lg space-y-2">
                  <p><strong>Name:</strong> {selectedAppointment.petName}</p>
                  <p><strong>Breed:</strong> {selectedAppointment.petBreed}</p>
                  <p><strong>Size:</strong> {selectedAppointment.petSize}</p>
                  {selectedAppointment.notes && (
                    <p><strong>Notes:</strong> {selectedAppointment.notes}</p>
                  )}
                </div>
              </div>

              {/* Appointment Details */}
              <div>
                <h3 className="font-semibold text-gray-900 mb-3">📅 Appointment Details</h3>
                <div className="bg-gray-50 p-4 rounded-lg space-y-2">
                  <p><strong>Date:</strong> {formatDate(selectedAppointment.date)}</p>
                  <p><strong>Time:</strong> {selectedAppointment.time}</p>
                  <p><strong>Status:</strong>
                    <span className={`ml-2 px-2 py-1 rounded text-xs font-medium ${getStatusColor(selectedAppointment.status)}`}>
                      {selectedAppointment.status}
                    </span>
                  </p>
                  <p><strong>Booking ID:</strong> {selectedAppointment.id}</p>
                </div>
              </div>

              {/* Services */}
              <div>
                <h3 className="font-semibold text-gray-900 mb-3">✂️ Services</h3>
                <div className="space-y-2">
                  {selectedAppointment.services.map((service) => (
                    <div key={service.id} className="bg-gray-50 p-3 rounded-lg">
                      <div className="flex justify-between items-center">
                        <span className="font-medium">{service.name}</span>
                        <span className="text-purple-600 font-semibold">{service.price}</span>
                      </div>
                      <p className="text-sm text-gray-600">{service.duration} minutes</p>
                    </div>
                  ))}
                </div>
              </div>

              {/* Status Update */}
              <div>
                <h3 className="font-semibold text-gray-900 mb-3">Status Update</h3>
                <div className="flex gap-2">
                  {(['confirmed', 'pending', 'completed', 'cancelled'] as const).map((status) => (
                    <button
                      key={status}
                      onClick={() => updateAppointmentStatus(selectedAppointment.id, status)}
                      className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                        selectedAppointment.status === status
                          ? 'bg-purple-600 text-white'
                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                      }`}
                    >
                      {status.charAt(0).toUpperCase() + status.slice(1)}
                    </button>
                  ))}
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex gap-3 pt-4">
                <button
                  onClick={() => window.open(`tel:${selectedAppointment.customerPhone}`)}
                  className="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-semibold transition-colors"
                >
                  📞 Call Customer
                </button>

                <button
                  onClick={() => window.open(`mailto:${selectedAppointment.customerEmail}`)}
                  className="flex-1 bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-lg font-semibold transition-colors"
                >
                  ✉️ Send Email
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
      </div>
    </div>
  );
}
